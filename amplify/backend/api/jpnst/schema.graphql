type JPFood
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  image: String
  author: String
  featured: Boolean
  price: Float
}

type JPOrder
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read] }
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
    ]
  ) {
  id: ID!
  owner: ID
  total: Float
  note: String
  email: String
}

type JPFoodOrder @model {
  id: ID!
  food_id: ID!
  order_id: ID!
  food: JPFood @connection(fields: ["food_id"])
  order: JPOrder @connection(fields: ["order_id"])
}

type JPNote @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  total: Float
  note: String
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  total: Float!
  note: String
  address: String
  token: String!
  cart: [CartItem]
}

enum OrderStatus {
  SUCCESS
  FAILED
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "processPayment-${env}")
    @function(name: "createOrder-${env}")
}
